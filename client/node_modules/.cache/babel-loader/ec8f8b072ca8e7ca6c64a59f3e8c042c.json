{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\martin.a.kalistenco\\\\Documents\\\\MERN\\\\root\\\\mytinerary-martin\\\\client\\\\src\\\\components\\\\Cities.js\";\nimport React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport NavBar from './NavBar';\nimport Image from 'react-bootstrap/Image';\nimport './Cities.css';\nimport { getAllCities } from '../store/actions/citiesActions';\nimport { connect } from \"react-redux\";\n\nclass Cities extends Component {\n  constructor() {\n    super();\n\n    this.filterCities = filter => {\n      var filteredCitiesArray = [];\n      var value = filter.target.value.toLowerCase();\n      this.state.citiesArray.map(element => {\n        if (element.city.toString().toLowerCase().startsWith(value)) filteredCitiesArray.push(element);\n      });\n      this.setState({\n        filteredCitiesArray\n      });\n    };\n\n    this.state = {\n      isLoading: false,\n      citiesArray: [],\n      filteredCitiesArray: []\n    };\n  }\n  /*   fetchCities = () => {\r\n  \n         fetch('http://172.16.127.35:5000/cities/all')\r\n             .then(response => response.json())\r\n             .then(citiesArray => this.setState({ citiesArray, isLoading: true, filteredCitiesArray: citiesArray }))\r\n             .catch(error => console.log(error))\r\n     } */\n\n\n  async UNSAFE_componentWillMount() {\n    await this.props.citiesArray();\n    this.setState({\n      filteredCitiesArray: this.props.cities.citiesReducer.citiesArray\n    });\n  }\n\n  render() {\n    /*        if (this.state.isLoading === false) {\r\n                return (\r\n                    <Container>\r\n                        <NavBar>\r\n                        </NavBar>\r\n                        <h6 className=\"d-flex justify-content-center mt-3\">Waiting for cities list to load</h6>\r\n                    </Container>\r\n                )\r\n            }\r\n    */\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"d-flex justify-content-center mt-3 mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Cities\"), React.createElement(Form, {\n      className: \"mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      type: \"city\",\n      placeholder: \"Filter your favourite city\",\n      onChange: this.filterCities,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.filteredCitiesArray.map(city => React.createElement(\"tr\", {\n      key: city._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: city.img,\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      className: \"d-flex justify-content-center mt-3\",\n      id: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, city.city)))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    citiesArray: () => dispatch(getAllCities())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);","map":{"version":3,"sources":["C:/Users/martin.a.kalistenco/Documents/MERN/root/mytinerary-martin/client/src/components/Cities.js"],"names":["React","Component","Table","Container","Form","NavBar","Image","getAllCities","connect","Cities","constructor","filterCities","filter","filteredCitiesArray","value","target","toLowerCase","state","citiesArray","map","element","city","toString","startsWith","push","setState","isLoading","UNSAFE_componentWillMount","props","cities","citiesReducer","render","_id","img","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAO,cAAP;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAE3BS,EAAAA,WAAW,GAAG;AACV;;AADU,SAkBdC,YAlBc,GAkBEC,MAAD,IAAY;AACvB,UAAIC,mBAAmB,GAAG,EAA1B;AACA,UAAIC,KAAK,GAAGF,MAAM,CAACG,MAAP,CAAcD,KAAd,CAAoBE,WAApB,EAAZ;AAEA,WAAKC,KAAL,CAAWC,WAAX,CAAuBC,GAAvB,CAA2BC,OAAO,IAAI;AAClC,YAAIA,OAAO,CAACC,IAAR,CAAaC,QAAb,GAAwBN,WAAxB,GAAsCO,UAAtC,CAAiDT,KAAjD,CAAJ,EACID,mBAAmB,CAACW,IAApB,CAAyBJ,OAAzB;AACP,OAHD;AAKA,WAAKK,QAAL,CAAc;AAAEZ,QAAAA;AAAF,OAAd;AACH,KA5Ba;;AAEV,SAAKI,KAAL,GAAa;AACTS,MAAAA,SAAS,EAAE,KADF;AAETR,MAAAA,WAAW,EAAE,EAFJ;AAGTL,MAAAA,mBAAmB,EAAE;AAHZ,KAAb;AAKH;AAED;;;;;;;;;AAqBA,QAAMc,yBAAN,GAAkC;AAC9B,UAAM,KAAKC,KAAL,CAAWV,WAAX,EAAN;AACA,SAAKO,QAAL,CAAc;AACVZ,MAAAA,mBAAmB,EAAE,KAAKe,KAAL,CAAWC,MAAX,CAAkBC,aAAlB,CAAgCZ;AAD3C,KAAd;AAGH;;AAEDa,EAAAA,MAAM,GAAG;AAEb;;;;;;;;;;AAUQ,WAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII;AAAI,MAAA,SAAS,EAAC,yCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAMI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,WAAW,EAAC,4BAAtC;AAAmE,MAAA,QAAQ,EAAE,KAAKpB,YAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,EAUI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKM,KAAL,CAAWJ,mBAAX,CAA+BM,GAA/B,CAAoCE,IAAD,IAChC;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACW,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEX,IAAI,CAACY,GADd;AAEI,MAAA,KAAK,MAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAII;AAAI,MAAA,SAAS,EAAC,oCAAd;AAAmD,MAAA,EAAE,EAAC,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8DZ,IAAI,CAACA,IAAnE,CAJJ,CADJ,CADH,CAFL,CAFJ,CAVJ,CAFJ;AAgCH;;AAnF0B;;AAsF/B,MAAMa,eAAe,GAAIjB,KAAD,IAAW;AAC/B,SAAO;AACHY,IAAAA,MAAM,EAAEZ;AADL,GAAP;AAGH,CAJD;;AAMA,MAAMkB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHlB,IAAAA,WAAW,EAAE,MAAMkB,QAAQ,CAAC7B,YAAY,EAAb;AADxB,GAAP;AAGH,CAJD;;AAOA,eAAeC,OAAO,CAClB0B,eADkB,EAElBC,kBAFkB,CAAP,CAGb1B,MAHa,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Form from 'react-bootstrap/Form'\r\nimport NavBar from './NavBar'\r\nimport Image from 'react-bootstrap/Image'\r\nimport './Cities.css'\r\nimport { getAllCities } from '../store/actions/citiesActions'\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Cities extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isLoading: false,\r\n            citiesArray: [],\r\n            filteredCitiesArray: []\r\n        };\r\n    }\r\n\r\n    /*   fetchCities = () => {\r\n   \r\n           fetch('http://172.16.127.35:5000/cities/all')\r\n               .then(response => response.json())\r\n               .then(citiesArray => this.setState({ citiesArray, isLoading: true, filteredCitiesArray: citiesArray }))\r\n               .catch(error => console.log(error))\r\n       } */\r\n\r\n\r\n    filterCities = (filter) => {\r\n        var filteredCitiesArray = [];\r\n        var value = filter.target.value.toLowerCase()\r\n\r\n        this.state.citiesArray.map(element => {\r\n            if (element.city.toString().toLowerCase().startsWith(value))\r\n                filteredCitiesArray.push(element)\r\n        })\r\n\r\n        this.setState({ filteredCitiesArray })\r\n    }\r\n\r\n    async UNSAFE_componentWillMount() {\r\n        await this.props.citiesArray(); \r\n        this.setState({\r\n            filteredCitiesArray: this.props.cities.citiesReducer.citiesArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n/*        if (this.state.isLoading === false) {\r\n            return (\r\n                <Container>\r\n                    <NavBar>\r\n                    </NavBar>\r\n                    <h6 className=\"d-flex justify-content-center mt-3\">Waiting for cities list to load</h6>\r\n                </Container>\r\n            )\r\n        }\r\n*/\r\n        return (\r\n\r\n            <Container>\r\n\r\n                <NavBar></NavBar>\r\n\r\n                <h2 className=\"d-flex justify-content-center mt-3 mb-3\">Cities</h2>\r\n\r\n                <Form className=\"mb-4\">\r\n                    <Form.Control type=\"city\" placeholder=\"Filter your favourite city\" onChange={this.filterCities} />\r\n                </Form>\r\n\r\n                <Table>\r\n\r\n                    <tbody>\r\n\r\n                        {this.state.filteredCitiesArray.map((city) =>\r\n                            <tr key={city._id}>\r\n                                <td>\r\n                                    <Image\r\n                                        src={city.img}\r\n                                        fluid />\r\n                                    <h5 className=\"d-flex justify-content-center mt-3\" id=\"text\">{city.city}</h5>\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n\r\n                </Table>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cities: state\r\n    };    \r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        citiesArray: () => dispatch(getAllCities())\r\n    };\r\n};\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Cities);"]},"metadata":{},"sourceType":"module"}